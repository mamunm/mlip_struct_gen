[project]
name = "mlip-struct-gen"
version = "0.1.0"
description = "Machine Learning Interatomic Potential Structure Generator"
authors = [{name = "Osman Mamun", email = "mamun.che06@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["molecular-dynamics", "mlip", "structure-generation", "packmol", "lammps"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
]

# External dependencies (install separately):
# - packmol: Required for water box generation
#   Install via: conda install -c conda-forge packmol
#   Or compile from source: https://github.com/m3g/packmol
dependencies = [
    "numpy>=1.24.0",
    "ase>=3.22.0",
    "rich>=13.0.0",
    "dpdata>=0.2.24",
]

[project.scripts]
mlip-struct-gen = "mlip_struct_gen.cli.main:main"
mlip-water-box = "mlip_struct_gen.cli.generators.water_box:main"
mlip-salt-water-box = "mlip_struct_gen.cli.generators.salt_water_box:main"
mlip-metal-surface = "mlip_struct_gen.cli.generators.metal_surface:main"
mlip-metal-water = "mlip_struct_gen.cli.generators.metal_water:main"
mlip-metal-salt-water = "mlip_struct_gen.cli.generators.metal_salt_water:main"
mlip-lammps-water = "mlip_struct_gen.cli.lammps.water_box:main"
mlip-lammps-salt-water = "mlip_struct_gen.cli.lammps.salt_water_box:main"
mlip-lammps-metal-surface = "mlip_struct_gen.cli.lammps.metal_surface:main"
mlip-lammps-metal-water = "mlip_struct_gen.cli.lammps.metal_water:main"
mlip-lammps-metal-salt-water = "mlip_struct_gen.cli.lammps.metal_salt_water:main"
mlip-trajectory-to-poscar = "mlip_struct_gen.cli.converters.trajectory_to_poscar:main"

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
all = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
target-version = "py311"
src = ["mlip_struct_gen"]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "artifacts",
]

[tool.ruff.format]
# Use ruff's formatter (replaces black)
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade (replaces standalone pyupgrade)
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "N805",  # first argument of a method should be named 'self'
    "TID252", # relative imports are fine within the package
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/**" = ["S101"]  # assert used in tests
"experiments/**" = ["E501"]  # allow long lines in experiment scripts

[tool.ruff.lint.isort]
known-first-party = ["mlip_struct_gen"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

# Mypy configuration (for manual runs, not in pre-commit)
# Run manually with: uv run mypy mlip_struct_gen
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
no_implicit_optional = true
strict_optional = true
check_untyped_defs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
disallow_untyped_decorators = false
disallow_any_generics = false
warn_redundant_casts = true
warn_unreachable = true
files = ["mlip_struct_gen/"]
exclude = [
    "build/",
    "dist/",
    "examples/",
    "experiments/",
]

[[tool.mypy.overrides]]
module = [
    "ase.*",
    "numpy.*",
    "rich.*",
    "packmol.*",
    "lammps.*",
    "dpdata.*",
    "tensorflow.*",
]
ignore_missing_imports = true
